generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  fullName String
  email    String  @unique
  password String?

  address String?
  bio     String?
  role    Role    @default(RECIPIENT)

  // required for donor, optional for recipient
  bloodGroup  String?
  phoneNumber String?

  // for donors only
  birthDate DateTime?

  image String?

  // for donors only
  birthID String?

  donationsData Donation[] @relation("DonorDonations")
  RecipientData Donation[] @relation("RecipientDonations")
  location      Location?

  locationId  String?
  isFirstTime Boolean @default(true)

  messages      Message[]
  conversations Conversation[] @relation("UserConversations")

  // Group admin relationships
  adminOfGroups Conversation[] @relation("GroupAdmin")

  // Message read receipts
  messageReads MessageRead[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  conversationId String?
}

model Ucode {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String?
  otp        String
  expired_at DateTime
  createdAt  DateTime @default(now())
}

model Location {
  id        String   @id @default(uuid())
  latitude  Float
  longitude Float
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Donation {
  id           String   @id @default(uuid())
  donorId      String // Donor side of the donation
  recipientId  String // Recipient who received the blood
  donor        User     @relation("DonorDonations", fields: [donorId], references: [id], onDelete: Cascade)
  recipient    User     @relation("RecipientDonations", fields: [recipientId], references: [id], onDelete: Cascade)
  donationTime DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([donorId])
  @@index([recipientId])
}

model Conversation {
  id          String   @id @default(uuid())
  type        ChatType @default(SINGLE)
  name        String?
  image       String?
  description String?

  // Group admin
  adminId String?
  admin   User?   @relation("GroupAdmin", fields: [adminId], references: [id])

  messages Message[]
  users    User[]    @relation("UserConversations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String @id @default(uuid())
  content        String
  senderId       String
  conversationId String

  // New fields for call functionality
  type         MessageType @default(TEXT)
  callStatus   CallStatus? // Only used when type is CALL
  callDuration Int? // Duration in seconds, only for CALL type

  sender       User          @relation(fields: [senderId], references: [id])
  conversation Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messageReads MessageRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([senderId])
}

enum MessageType {
  TEXT
  CALL
}

enum CallStatus {
  MISSED
  DECLINED
  COMPLETED
}

// New model to track message read receipts
model MessageRead {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

enum ChatType {
  SINGLE
  GROUP
}

enum Role {
  ADMIN
  DONOR
  RECIPIENT
}

// // "Delete" a user (soft delete)
// await prisma.user.update({
//   where: { id: userId },
//   data: { isDeleted: true }
// });

// // Get conversations with messages including deleted users' messages
// const conversation = await prisma.conversation.findUnique({
//   where: { id: conversationId },
//   include: {
//     messages: {
//       include: {
//         sender: true // will include null for deleted senders
//       }
//     },
//     users: {
//       where: { isDeleted: false } // filter out deleted users
//     }
//   }
// });
// https://chat.deepseek.com/a/chat/s/ea4c7c0b-5193-490f-8a16-75daeee68f2c
